/*
 * ExplorerFrame.java
 *
 * Created on __DATE__, __TIME__
 */

package org.jcoderz.keytoolz.keystoreexplorer;

import java.io.File;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.util.Enumeration;

import javax.swing.ToolTipManager;
import javax.swing.tree.*;

import org.jcoderz.keytoolz.keystoreexplorer.util.PropertiesUtil;
import org.jcoderz.keytoolz.keystoreexplorer.util.SemaphoreUtil;


/**
 * @author __USER__
 */
public class ExplorerFrame
    extends javax.swing.JFrame
{
  private static final long serialVersionUID = 1L;

  private ErrorDialog messageDiag = new ErrorDialog(this, true);

  private DirectoryChooserDialog dirDiag = new DirectoryChooserDialog(this, true);

  private PasswordDialog passDiag = new PasswordDialog(this, "KeyStore", true);

  private ExplorerPopupMenus popups;


  /** Creates new form ExplorerFrame */
  public ExplorerFrame()
  {
    initComponents();
    initFromProperties();
    ToolTipManager.sharedInstance().registerComponent(jTree1);
    popups = new ExplorerPopupMenus(jTree1, this);
    jTree1.addMouseListener(popups);
    jScrollPane1.addMouseListener(popups);
  }


  /**
   * This method is called from within the constructor to initialize the
   * form. WARNING: Do NOT modify this code. The content of this method
   * is always regenerated by the Form Editor.
   */
  // GEN-BEGIN:initComponents
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents()
  {

    jTextField1 = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    jTree1 = new javax.swing.JTree();
    certificateExplorer1 = new org.jcoderz.keytoolz.keystoreexplorer.CertificateExplorer();
    jButton1 = new javax.swing.JButton();
    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Keystore Explorer");
    setIconImage(new javax.swing.ImageIcon(getClass().getResource("/images/keystore.gif"))
        .getImage());
    setLocationByPlatform(true);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });

    jTextField1.setFont(new java.awt.Font("Arial", 0, 12));
    jTextField1.setPreferredSize(new java.awt.Dimension(216, 21));
    jTextField1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        directoryEntered(evt);
      }
    });

    jTree1.setCellRenderer(new KeyStoreTreeCellRenderer());
    jTree1.setModel(new DefaultTreeModel(null));
    jTree1.setRootVisible(false);
    jTree1.setShowsRootHandles(true);
    jTree1.setVisibleRowCount(50);
    jTree1.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener()
    {
      public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt)
      {
      }


      public void treeExpanded(javax.swing.event.TreeExpansionEvent evt)
      {
        ExplorerFrame.this.treeExpanded(evt);
      }
    });
    jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener()
    {
      public void valueChanged(javax.swing.event.TreeSelectionEvent evt)
      {
        treeValueChanged(evt);
      }
    });
    jTree1.addVetoableChangeListener(new java.beans.VetoableChangeListener()
    {
      public void vetoableChange(java.beans.PropertyChangeEvent evt)
          throws java.beans.PropertyVetoException
      {
        jTree1VetoableChange(evt);
      }
    });
    jTree1.addTreeWillExpandListener(new javax.swing.event.TreeWillExpandListener()
    {
      public void treeWillCollapse(javax.swing.event.TreeExpansionEvent evt)
          throws javax.swing.tree.ExpandVetoException
      {
      }


      public void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)
          throws javax.swing.tree.ExpandVetoException
      {
        ExplorerFrame.this.treeWillExpand(evt);
      }
    });
    jScrollPane1.setViewportView(jTree1);

    certificateExplorer1.setEnabled(false);

    jButton1.setFont(new java.awt.Font("Arial", 0, 12));
    jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/openfolder.gif"))); // NOI18N
    jButton1.setPreferredSize(new java.awt.Dimension(32, 24));
    jButton1.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        ExplorerFrame.this.actionPerformed(evt);
      }
    });

    jLabel1.setFont(new java.awt.Font("Arial", 1, 12));
    jLabel1.setLabelFor(jTextField1);
    jLabel1.setText("Current Directory");
    jLabel1.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    jLabel2.setFont(new java.awt.Font("Arial", 1, 12));
    jLabel2.setText("Certificate");

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(
            layout.createSequentialGroup().addContainerGap().add(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                    jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 207,
                    Short.MAX_VALUE).add(jLabel1).add(
                    layout.createSequentialGroup().add(jTextField1,
                        org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jButton1,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))).add(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
                    layout.createSequentialGroup().addPreferredGap(
                        org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel2).addContainerGap())
                    .add(
                        org.jdesktop.layout.GroupLayout.TRAILING,
                        layout.createSequentialGroup().addPreferredGap(
                            org.jdesktop.layout.LayoutStyle.RELATED,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).add(
                            certificateExplorer1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap()))));
    layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
        .add(
            layout.createSequentialGroup().addContainerGap().add(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(jLabel1)
                    .add(jLabel2)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(
                layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false).add(
                    layout.createSequentialGroup().add(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(
                            jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(jTextField1,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                            org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                            org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(3, 3, 3).add(
                        jScrollPane1, 0, 0, Short.MAX_VALUE)).add(certificateExplorer1,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
                    org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
                    org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));

    pack();
  }// </editor-fold>


  // GEN-END:initComponents

  private void jTree1VetoableChange(java.beans.PropertyChangeEvent evt)
      throws java.beans.PropertyVetoException
  {
    // TODO add your handling code here:
  }


  private void formWindowClosing(java.awt.event.WindowEvent evt)
  {// GEN-FIRST:event_formWindowClosing
    SemaphoreUtil.notifySingle();
  }// GEN-LAST:event_formWindowClosing


  // GEN-FIRST:event_treeValueChanged

  private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt)
  {
    TreePath treePath = evt.getNewLeadSelectionPath();
    if (treePath != null && treePath.getPathCount() == 3)
    {
      DefaultMutableTreeNode node = (DefaultMutableTreeNode) treePath.getLastPathComponent();
      KeyStoreEntryHolder holder = (KeyStoreEntryHolder) node.getUserObject();
      certificateExplorer1.setCertChain(holder.getChain(), holder.isKeyEntry());
      certificateExplorer1.setEnabled(true);
    }
    else
    {
      certificateExplorer1.setEnabled(false);
    }
  }// GEN-LAST:event_treeValueChanged


  // GEN-FIRST:event_directoryEntered
  private void directoryEntered(java.awt.event.ActionEvent evt)
  {
    File currentDir = new File(jTextField1.getText());
    if (currentDir.isDirectory())
    {
      generateTree(currentDir);
    }
    else
    {
      messageDiag.setMessage("The entered directory does not exist.");
      messageDiag.setVisible(true);
    }
  }// GEN-LAST:event_directoryEntered


  // GEN-FIRST:event_treeExpanded
  private void treeExpanded(javax.swing.event.TreeExpansionEvent evt)
  {
    jTree1.revalidate();
  }// GEN-LAST:event_treeExpanded


  // GEN-FIRST:event_treeWillExpand
  private void treeWillExpand(javax.swing.event.TreeExpansionEvent evt)
      throws javax.swing.tree.ExpandVetoException
  {
    DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
    KeyStoreHolder ksHolder = (KeyStoreHolder) node.getUserObject();
    if (ksHolder != null)
    {
      if (ksHolder.getStorePass() == null)
      {
        passDiag.setVisible(true);
        if (passDiag.getPassword().length == 0)
        {
          throw new ExpandVetoException(evt, "no password entered");
        }
        ksHolder.setStorePass(passDiag.getPassword());
        try
        {
          ksHolder.loadKeyStore();
        }
        catch (Exception e)
        {
          String message = e.getMessage();
          if (message == null)
          {
            message = "error loading keystore";
          }
          messageDiag.setMessage(message);
          messageDiag.setVisible(true);
          ksHolder.setStorePass(null);
          throw new ExpandVetoException(evt, message);
        }
      }
      node.removeAllChildren();
      KeyStore ks = ksHolder.getKeyStore();
      Enumeration<String> aliases = null;
      try
      {
        aliases = ks.aliases();
      }
      catch (KeyStoreException kse)
      {
        // TODO Auto-generated catch block
        kse.printStackTrace();
      }
      while (aliases.hasMoreElements())
      {
        String alias = aliases.nextElement();
        KeyStoreEntryHolder userObject = null;
        try
        {
          if (ks.isKeyEntry(alias))
          {
            userObject = new KeyStoreEntryHolder(alias, ks.getCertificateChain(alias));
          }
          else
          {
            userObject = new KeyStoreEntryHolder(alias, ks.getCertificate(alias));
          }
        }
        catch (KeyStoreException e)
        {
          // TODO Auto-generated catch block
          e.printStackTrace();
        }
        DefaultMutableTreeNode child = new DefaultMutableTreeNode(userObject);
        node.add(child);
      }
    }
  }// GEN-LAST:event_treeWillExpand


  // GEN-FIRST:event_actionPerformed
  private void actionPerformed(java.awt.event.ActionEvent evt)
  {
    PropertiesUtil.PROGRAM_SETTINGS.setProperty("start.dir", jTextField1.getText());
    dirDiag.setVisible(true);
    File currentDir = dirDiag.getSelectedDir();
    if (currentDir != null)
    {
      jTextField1.setText(currentDir.getPath());
      generateTree(currentDir);
    }
  }// GEN-LAST:event_actionPerformed


  private void generateTree(File currentDir)
  {
    PropertiesUtil.PROGRAM_SETTINGS.setProperty("start.dir", jTextField1.getText());
    Enumeration<TreePath> expandedDescendants = null;
    DefaultMutableTreeNode newRoot = new DefaultMutableTreeNode();
    File[] keystoreFiles = currentDir.listFiles(new StrictKeyStoreFileFilter());
    DefaultTreeModel model = (DefaultTreeModel) jTree1.getModel();
    DefaultMutableTreeNode oldRoot = (DefaultMutableTreeNode) model.getRoot();
    for (File f : keystoreFiles)
    {
      KeyStoreHolder newKsHolder = new KeyStoreHolder(f);
      if (oldRoot != null)
      {
        Enumeration<TreeNode> children = oldRoot.children();
        while (children.hasMoreElements())
        {
          DefaultMutableTreeNode child = (DefaultMutableTreeNode) children.nextElement();
          KeyStoreHolder oldKsHolder = (KeyStoreHolder) child.getUserObject();
          if (oldKsHolder.getKsFile().compareTo(f) == 0)
          {
            if (oldKsHolder.getStorePass() != null)
            {
              newKsHolder.setStorePass(oldKsHolder.getStorePass());
              try
              {
                newKsHolder.loadKeyStore();
              }
              catch (Exception e)
              {
                e.printStackTrace();
                newKsHolder.setStorePass(null);
              }
            }
            break;
          }
        }
      }
      DefaultMutableTreeNode node = new DefaultMutableTreeNode(newKsHolder);
      node.add(new DefaultMutableTreeNode("dummy"));
      newRoot.add(node);
    }
    if (oldRoot != null)
    {
      expandedDescendants = jTree1.getExpandedDescendants(new TreePath(oldRoot.getPath()));
    }
    model.setRoot(newRoot);
    model.nodeStructureChanged(oldRoot);
    model.nodeStructureChanged(newRoot);
    if (expandedDescendants != null)
    {
      while (expandedDescendants.hasMoreElements())
      {
        jTree1.expandPath(expandedDescendants.nextElement());
      }
    }
  }


  public void reloadTree()
  {
    this.generateTree(new File(jTextField1.getText()));
  }


  private void initFromProperties()
  {
    String startDir = PropertiesUtil.PROGRAM_SETTINGS.getProperty("start.dir");
    if (startDir != null)
    {
      File startDirFile = new File(startDir);
      if (startDirFile.isDirectory())
      {
        jTextField1.setText(startDir);
        generateTree(startDirFile);
      }
    }
  }


  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new ExplorerFrame().setVisible(true);
      }
    });
  }

  // GEN-BEGIN:variables
  // Variables declaration - do not modify
  private org.jcoderz.keytoolz.keystoreexplorer.CertificateExplorer certificateExplorer1;
  private javax.swing.JButton jButton1;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextField jTextField1;
  private javax.swing.JTree jTree1;
  // End of variables declaration//GEN-END:variables

}
